{"pageProps":{"post":{"content":"<h1 id=\"분할정복\">분할정복</h1>\n<blockquote>\n<p>Devide &amp; Conquer</p>\n</blockquote>\n<p>분할 정복은 하나의 문제를 두개 이상의 문제로 나누어 각각의 조각의 문제들의 답을 구하는 방식으로 최종적으로 전체 문제의 답을 다시 구하는 방식이다. 따라서 분할 정복을 사용할 수 있는 문제는 나누어질 수 있어야 하고, 그 나눠진 조각들은 같은 크기의 문제들이어야 한다.</p>\n<p>분할 정복을 사용하는 알고리즘들은 대체로 세 가지의 구성요소를 가지고 있다.</p>\n<ol>\n<li>문제를 더 작은 문제로 분할한다.</li>\n<li>더이상 답을 분할할 수 없는 작은 문제와 나머지 같은 크기의 문제로 나누어진다.</li>\n<li>각 문제에 구한 답을 재귀적으로 원래 문제에 대한 답으로 합친다.</li>\n</ol>\n<h2 id=\"수열의-합\">수열의 합</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">number</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (number === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (number % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> sum(number - <span class=\"hljs-number\">1</span>) + number;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * sum(number / <span class=\"hljs-number\">2</span>) + (number / <span class=\"hljs-number\">2</span>) * (number / <span class=\"hljs-number\">2</span>);\n}</code></pre>\n<h2 id=\"과반수-엘리먼트\">과반수 엘리먼트</h2>\n<p>과반수를 차지하는 엘리먼트를 출력하라.</p>\n<h3 id=\"brute-force\">Brute force</h3>\n<blockquote>\n<p>Brute force 로는 시간제한을 넘게 된다.</p>\n</blockquote>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">majorityElement</span>(<span class=\"hljs-params\">numbers = []</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> numbersLength = numbers.length;\n  <span class=\"hljs-keyword\">const</span> majorityStandardLength = numbersLength / <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; numbersLength; i++) {\n    <span class=\"hljs-keyword\">const</span> currentNumber = numbers[i];\n    <span class=\"hljs-keyword\">const</span> currentNumberCount = numbers.filter(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number === currentNumber\n    ).length;\n    <span class=\"hljs-keyword\">if</span> (currentNumberCount &gt; majorityStandardLength) {\n      <span class=\"hljs-keyword\">return</span> currentNumber;\n    }\n  }\n}</code></pre>\n<h3 id=\"dynamic-programming\">Dynamic Programming</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> counts = [];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">majorityElement</span>(<span class=\"hljs-params\">numbers = []</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> numbersLength = numbers.length;\n  <span class=\"hljs-keyword\">const</span> majorityStandardLength = numbersLength / <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; numbersLength; i++) {\n    <span class=\"hljs-keyword\">const</span> currentNumber = numbers[i];\n\n    <span class=\"hljs-keyword\">if</span> (!counts[currentNumber]) {\n      counts[currentNumber] = numbers.filter(\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number === currentNumber\n      ).length;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (counts[currentNumber] &gt; majorityStandardLength) {\n      <span class=\"hljs-keyword\">return</span> currentNumber;\n    }\n  }\n}</code></pre>\n<h3 id=\"devide--conquer\">Devide &amp; Conquer</h3>\n","data":{"titlePrefix":"Algorithm","title":"분할정복"},"isEmpty":false,"excerpt":""}},"__N_SSG":true}